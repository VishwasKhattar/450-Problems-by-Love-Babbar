// Find longest coinsecutive subsequence
// Not Optimized (Using Only Array)

#include <bits/stdc++.h>
using namespace std;

void Longsub(int arr[], int n)
{
    sort(arr, arr + n);
    vector<int> newarr;
    int count = 1;
    int ans = 0;
    newarr.push_back(arr[0]);
    for (int i = 1; i < n - 1; i++)
    {
        if (arr[i] != arr[i - 1])
            newarr.push_back(arr[i]);
    }

    for (int i = 0; i < newarr.size(); i++)
    {
        if (newarr[i] = newarr[i + 1] - 1)
        {
            count++;
            ans = max(ans, count);
        }
        else
        {
            count = 1;
        }
    }
    cout << "Largest lenth of subarray is = " << ans;
}

int main()
{
    int arr[] = {1, 2, 3, 1, 5, 2, 1, 6, 4, 2, 1};
    int n = sizeof(arr) / sizeof(int);
    Longsub(arr, n);
    return 0;
}
